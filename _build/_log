### Starting build.
# Target: Cards.mli.depends, tags: { package(oUnit), extension:mli, file:Cards.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Cards.mli > Cards.mli.depends # cached
# Target: Cards.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:Cards.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Cards.cmi Cards.mli # cached
# Target: Cards.ml.depends, tags: { package(oUnit), coverage, extension:ml, file:Cards.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Cards.ml > Cards.ml.depends # cached
# Target: Cards.cmo, tags: { package(oUnit), byte, compile, coverage, extension:cmo, extension:ml, file:Cards.cmo, file:Cards.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Cards.cmo Cards.ml # cached
# Target: Chip.mli.depends, tags: { package(oUnit), extension:mli, file:Chip.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Chip.mli > Chip.mli.depends # cached
# Target: Chip.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:Chip.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Chip.cmi Chip.mli # cached
# Target: Chip.ml.depends, tags: { package(oUnit), coverage, extension:ml, file:Chip.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Chip.ml > Chip.ml.depends # cached
# Target: Chip.cmo, tags: { package(oUnit), byte, compile, coverage, extension:cmo, extension:ml, file:Chip.cmo, file:Chip.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Chip.cmo Chip.ml # cached
# Target: Game.mli.depends, tags: { package(oUnit), extension:mli, file:Game.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Game.mli > Game.mli.depends # cached
# Target: Game.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:Game.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Game.cmi Game.mli # cached
# Target: Game.ml.depends, tags: { package(oUnit), coverage, extension:ml, file:Game.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Game.ml > Game.ml.depends # cached
# Target: Game.cmo, tags: { package(oUnit), byte, compile, coverage, extension:cmo, extension:ml, file:Game.cmo, file:Game.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Game.cmo Game.ml # cached
# Target: Blackjack.mli.depends, tags: { package(oUnit), extension:mli, file:Blackjack.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Blackjack.mli > Blackjack.mli.depends # cached
# Target: Blackjack.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:Blackjack.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Blackjack.cmi Blackjack.mli # cached
# Target: Blackjack.ml.depends, tags: { package(oUnit), coverage, extension:ml, file:Blackjack.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Blackjack.ml > Blackjack.ml.depends # cached
# Target: Player.mli.depends, tags: { package(oUnit), extension:mli, file:Player.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -modules Player.mli > Player.mli.depends
# Target: Player.cmi, tags: { package(oUnit), byte, compile, extension:mli, file:Player.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Player.cmi Player.mli
# Target: Blackjack.cmo, tags: { package(oUnit), byte, compile, coverage, extension:cmo, extension:ml, file:Blackjack.cmo, file:Blackjack.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -o Blackjack.cmo Blackjack.ml
+ ocamlfind ocamlc -c -package oUnit -o Blackjack.cmo Blackjack.ml
File "Blackjack.ml", line 96, characters 35-45:
96 |                        Cards.empty Chip.empty false);
                                        ^^^^^^^^^^
Error: This expression has type Chip.t but an expression was expected of type
         Chip.t list
Command exited with code 2.
# Compilation unsuccessful.
